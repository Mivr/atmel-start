// Code generated by "esc -o templates.go -pkg atmelstart templates"; DO NOT EDIT.

package atmelstart

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/toolchain.cmake": {
		local:   "templates/toolchain.cmake",
		size:    2353,
		modtime: 1525118353,
		compressed: `
H4sIAAAAAAAC/5xWUXObOBB+Nr9iJ8lM7Mnh3kyf+tAHgqmPKwYGcHt+0shiTXQBySdE2wzDf78RBhen
aSfTJxJp99vv2/0kmVX0EUnFBa+aiij8r+EK8/knL0n9KIS3yz8XlnUNt2sUqDi7hYNUgNUe8xxzqJ9q
jRV85fpBNhqogChdWjXqubtxPnok3aWZtyGhs/FgQOjhUtTgApPVkZeophkucaNN7AdeAlRVtpACbaR7
bheMLcbMu7uXc+/ufpp9dzdmy/2/TB6foNG85PppChDd/+1G8e5Z7pDQE48VfkGhayi5eOSiAF7XDcLX
B14iaKy1WXuJW5bsRm4kc5K1l5FsF3uQZk7muyTw7xMn2X1vzti+JIoyoDUcuMjJUclC0Wq+ACWlnsJ/
8MMVMbEkdrK/yCZaeSROonXibCD0PnnJ4gL4MvyMX/K9ourplfgDZ4jCYPcq+AMvcb54c5JC9cMr6/ih
G2xX3uvrHCl7pAW+tk2O+9FZj/DWNTi6whJSTZXuASDnCpmWavCKk228gKSZk2Rk5Sdw0w722yaJF2Yk
8NN+o+vRAi4eUUHNFD8OXAI//OglJHUTP87g6qZ9hti9advlKS/t07ruygh3ZVVJcbYXUJH3PkQFh5IW
9aA02myikHwInHUKV3alH5pqD3bFjs37tl268XaAM308Y00BhoN4QjD8ppAd2FEN9uHQCKa5FHaN/bcG
uyqlKGxGy7IGu3gL9mdalmDXOn9fiObdO7BXhLTtcoVfOMOuI+TM4wUZPQvvH+Ozvl2DoB/YfC7/sO3a
TMsulGyOYJfVsIoiH9fs+oisfi+okMv+zyGkYBMB2U17MRvTJ0NQNoohGPvWgN+0okxjDgclK7gtGHuz
oY9odm+XVslrPXfi2AtXMB1rGm0T1xgw8FILAKBtbVBUFAjLE/4HA991/eZPPNF1V+dcFHnXWT0/X7Cy
yfHsU/77NIezZir+QHMos+Lqd2hWlCk5p7qfFKF5TvAbskbTvbk5qSpQE0ErXFjWzMwfy0P/P9y0k91u
ieVhcYrYc/FixJ6LKYi5ac5n9N4PnWR3YnrTjjW6CeIvwseC5mAbfdcQNfrY6BqwPPT2WPbrl+Lml/Tg
pnWSddh/f+IPgz+7hgR7dfoBJ/iGJxnwjkoeUWmO9fMacRLFXpL5XgrRNou32ekJvlA8SFhNTKMl8MFL
Wo53w0jgpG0oM4SRieV+4LC9D3z3mcypv75z6H8aUI2w52LUaZrImlrLijBZVVTkc2s2Oz2d8LxUlGbk
fusHK2s2M9eDE67OMxwedXNvGXyqnoY+mEmbMYxT76zZwrJQ5L+y6uL/AAAA//9VMj+oMQkAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}
