// Code generated by "esc -o templates.go -pkg atmelstart templates"; DO NOT EDIT.

package atmelstart

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/CMakeLists.txt": {
		local:   "templates/CMakeLists.txt",
		size:    587,
		modtime: 1524866854,
		compressed: `
H4sIAAAAAAAC/5yQ32qjQBSH732KQ3ZBc7GThX0CNxoQzB/U9HaYzJyYITrS45G0iO9etFJSQqH0+nc4
38ena3VFWVtn666WhM+dJTTBU5zlyX4H/8Tfpef9grzpSCOcbYUt4AuT0owGztTU4Jdar7bqiuPqC6+y
LQfh4RDvIgiLbZzKvAizQub7Y7aO5SZJ49wDAOj7P0DKlQji/f9mfD8M07gQq74Xw7D4OEVnhsGbdBKn
q84gGEuouSH7c6tkt06PUSyjJHuwmjGRpW9ZFYpKZOAGuhaBLwglOiQ1OunGIKgWFFT2RIpeIbhZvjQd
g18r64T2l8JTxsh5DxTXWMmWFTHkRVgka/jdf9VzmASiuxzcgJ0r3S7o4NTZylhXTl4zQ3g8Kcv5Ut71
/MQ/HP+nD/z7ciP/LQAA///4ieJGSwIAAA==
`,
	},

	"/templates/toolchain.cmake": {
		local:   "templates/toolchain.cmake",
		size:    2290,
		modtime: 1524877235,
		compressed: `
H4sIAAAAAAAC/5xVUW+jOBB+Dr9i1EZKohzpSfu0D32ghOa4JhAB3b08WY6ZUF/B5GyzuxXiv59MSEq6
qbbavlDZ833zzcw3DivoM5KCC15UBZH4X8UlpuMvXhT7YQCfZn9OLOsaRgsUKDkbwa6UgMUW0xRTUC9K
YwHfuX4qKw1UQBjPLIV67K6cB4/EmzjxViRwVh50DC1djBpcYGWx5znKPsIlbrha+0svAioLW5QCbaRb
bmeMTY7I6fQydjp9Fz2dHtHl9l9W7l+g0jzn+qVPEN797YbrzRtsB2iFryV+Q6EV5Fw8c5EBV6pC+P7E
cwSNSpuzS9qSaHPURhInWngJSTZrD+LESXyXLP27yIk2r805ti8KwwSogh0XKdnLMpO0GE9AlqXu09/7
wZyYWLJ2kr/IKpx7ZB2Fi8hZQeB98aLJGfF5+Ik/51tJ5csH+TvNEAbLzYfodzzH8eTmUArVTx/M4wfu
8nHufTzPnrJnmuFH2+S4D87iSG9dg6MLzCHWVOqWAFIukelSdl5xkpW3JHHiRAmZ+xEM685+j1HkBQlZ
+nF70bRsSy6eUYJiku87LUs/ePAiEruRv07gali/YWxu6np2wMUtrGmuTOFuWRSlONkLqEhbH6KEXU4z
1VUarlZhQO6XziKGK7vQT1WxBbtg++q2rmfu+rGjM308cfUJukU8MBh9fcoG7FCBvdtVgmleClth+1Vg
F3kpMpvRPFdgZ5/A/krzHGyl09tMVJ8/gz0npK5nc/zGGTYNIScdF8poVXj/GJ+17eoK+knN1/wP21Zm
WnYmy2oPdl50pyjS45mt9sjUraCinLX/diEZ6xWQDOuz2Zg+GYFlJRmCsa8C/KElZRpT2MmygFHG2M2K
PqO5Hc2snCs9dtZrL5hDf6xx+Bi5xoBLL7YAAOraBklFhjA78N8b+qZpL9/xRNNcnbAo0qaxWn2+YHmV
4smn/PdldrtmMv4ks0sz5/J3ZBaUyXJM05RQs1+knRjBH8gqTbfm9aQyQ00ELXBitXhjA8x37bsBw7oX
0Mww301OQVsuLgZtueioriGs9L7SCkYGOmqHOWuvjKRXGeNhfUzZwLB2okXQft8ZZXPin/ear0vg3Ux0
edwx0E/YZT8k7qR2kaQ3vTMR68e7pe++0dCfU3Ohxi0XxxoHpkBWKV0W5JBybA0Gw/rYtMYaDMxKOcH8
9JR1P4Rm12HLBZUvcN6XPnjuGRvF/QhrMLGswasg8w606/Pa8jeKoPs7n+Dp+EKOMxUmZmJZKNJf+Wzy
fwAAAP//QSHZ8/IIAAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}
