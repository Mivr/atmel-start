// Code generated by "esc -o templates.go -pkg atmelstart templates"; DO NOT EDIT.

package atmelstart

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/toolchain.cmake": {
		name:    "toolchain.cmake",
		local:   "templates/toolchain.cmake",
		size:    2770,
		modtime: 1575348802,
		compressed: `
H4sIAAAAAAAC/5xWTXObSBA9i1/RZbvKUmlRdit7ySEHDFjLRgIVoMQ6TY2GljxrGLTDkMRF8d+3hg8F
yXLWlZPE0P36vek3zVzD3PXd0IpdB+69hQsmOAH4QQyu48WGwTL6hCTjgmdlRiT+W3KJyfizG0Ze4MP7
2e8Tw7iGey4SYHl24CnKmbHjIiEHme8lzcZWuCS2DVRmpsgFmki33NwzNrkQ9vBwHjedXogL7v62g9Xm
LDbf/sPyw3ND6HaOAiVnt7DLJWC2xSTBBIrnQmEG37h6zEsFVEAQzYwC1dheWp9cEm2i2F0S31q60CE0
cBEqsAcCf2TYxA6WK2/hhnBTtVLrSZ8xnV7OmU5fZD08HNM6HVAqnnL1PMzshbdJ3VPdUFxJ/IpCFZBy
8cTFHnhRlAjfHnmKoLBQeu0Smzjc9GxIbIVzNybxZuVCFFuxZ5OFdxda4ebHNvQbFQZBDLSAk+5MQOa5
GsLfe75DdCxZWfFfZBk4LlmFwTy0luC7n91wcgJ8Gn7ET/lWUvn8RvyOMwT+YvMm+B1PcTx510qh6vGN
dTzfXqwd9+11DpQ90T2+dZss+5M17+GNa7BUhilEikrVAEDCJTKVy84kVrx0FySKrTAmjqe91RluHYau
H5OFFzUvWscsuHhCCQWT/NBxWXj+JzckkR16qxiubqozxPpdVc3avKhJq+srLdzOsywXR3sBFUnjQ5Sw
S+m+6JQGy2Xgk7u1t3CILkXuF9Y8giszU49ltgUzY4fyY1XN7NX6DLmBZNPpBTxbn54e6qZ6pUoNZlCA
uduVgimeC7PA5levJVTRwXOW5mJvMpqmBYC5fw/mF5qmYDqEVNXMwa+cYV0TcjV5MRpO6HUDomU2oDYg
XINZqOTjXpQfPsDVpcFxAfGo9v8wp9M//gRzJ3JTPUqkSUF3aBaKKs6Kdl0qxdt/+J3hodmAI40LHWwI
uA8u6Zzyhl3/kv5m6qJSmXuZlwcw06xbRZH0a2ZxQFZ8FFTks+ZvF7Jng8bEN9WJQ7VFNNe8lAxBH+IC
8LuSlClMYCfzDG73jL1b0ifUb29nRsoLNbZWK9d3YGjuKFiHtj6GCzcyAACqygRJxR5h1uLfa/i6bl6+
cjLq+uqYiyKpa6Ph5wmWlgkeTyv/dZrdxNEVX9Dsyjhc/grNjDKZj6lqOkVokhD8jqxUdKu/H1TuURFB
M5wYxkhbAdNd8ww31eBtPcN0N2kjtlxcjNhyMQTR8/Y4qe483wo3LdObqq9RDxB/Et4X1ONN67uGoFSH
UhWA6a6xx6xZPxU3PqXXfFvnfvP7ij80/ugaQmzUqUcc4GuepMM7yPyAUnEszmuswmDlhrHnRhCs49U6
bq8cJ4o7Cc7ANCoH3nlJ5f2E6Am02royXRgZWO4Fh/XdwrPPZA799YNDcxWiCmHLRa9TbyIrC5VnhOVZ
RkUyNkaj9gIB56WCKG5HgzEa6Ulh+c6xh/0tBsxA41P53O2D7rRuQ9/12hhNDANF8jOrTv4LAAD//0cy
+K7SCgAA
`,
	},

	"/templates": {
		name:  "templates",
		local: `templates`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"templates": {
		_escData["/templates/toolchain.cmake"],
	},
}
