// Code generated by "esc -o templates.go -pkg atmelstart templates"; DO NOT EDIT.

package atmelstart

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/toolchain.cmake": {
		name:    "toolchain.cmake",
		local:   "templates/toolchain.cmake",
		size:    2537,
		modtime: 1547353474,
		compressed: `
H4sIAAAAAAAC/5xWUXObOBB+Nr9iJ8lM7PHh3k3vpQ99IDbNcbWBAdzWTxpZLEQXkHySaJth+O83wtgl
adrJ9Qksab/9vt1Pa1hN75HUXPC6qYnCfxuuMJ9+8JM0iEJ4vfh95jiXcH2LAhVn11BIBVjvMc8xB/2g
DdbwhZs72RigAqJ04Wg00+XGe++TdJdm/oaE3saHAaGHS9HAEpisD7xCNY5YkmW0iYO1nwBVtSukQBfp
nrslY7NT5Hz+fOx8/sPo+fwULff/MHl4gMbwipuHMUB08/cyindPYoeAnnis8DMKo6Hi4p6LErjWDcKX
O14hGNTGrj3HLUt2J24k85JbPyPZLvYhzbwsWJJ1cJN4ye5bcU7lS6IoA6qh4CInByVLRevpDJSUZgz/
LghXxJ4lsZf9RTbRyidxEt0m3gZC/4OfzB4BPz5+xq/4XlH18EL8gTNE4Xr3IviCVzidvTpKoebuhXmC
cLnervyX5zlQdk9LfGmZvOV77/YE71yCZ2qsIDVUmR4Acq6QGakGr3jZxl+TNPOSjKyCBK7awX7bJPHD
jKyDtN/oerQ1F/eoQDPFDwOXdRC+9xOSLpMgzuDiqn2C2L1q28UxLu3Duu7CCl/KupbibC+gIu99iAqK
ipZ6UBptNlFI3q292xQu3NrcNfUe3Jodmrdtu1jG2wHO1vGMNQYYLuIRwfIbQ3bgRhrcomgEM1wKV2P/
1ODWlRSly2hVaXDL1+B+pFUFrjb521I0b96AuyKkbRcr/MwZdh0hF7Nxxk+f/n/OIqeGvpjDfP7Hn+AW
QrrmTiHNNS3Q1YYazvRxXRnDj2/4leFhQH2G97F+z5S/1+J/svejb/PQiO8Ufax+c21uZdxSyeYAblUP
qyjy05qrD8j0W0GFXPSvw5GSjURnV+0jT9n+WoKyUQzBXjsN+NUoygzmUChZw3XJ2KsNvUe7e71wKq7N
1ItjP1zB2I5ptE2W9uKs/dQBAGhbFxQVJcLiiP/Ownddv/kDL3fdxTkWRd51Ts8vEKxqcjzfL/7rNIcZ
YTN+R3NIs+LqV2jWlCk5pabvFKF5TvArssbQvZ34VJVoiKA1zhxnYvuPVdH/hqt2tNstsCpmxxN7Lp49
sediDGIn5Hm23AShl+yOTK/aU45uhPiT46eEdiBZfZcQNebQGA1YFb09Fv36Y3HTx/TgqvWS27B//sAf
Fn9yCQn26swdjvAtTzLgHZQ8oDIc9dMccRLFfpIFfgrRNou32fHT4ZHiQcJqZBojgQ9eMvI0004EjtqG
NMMxMrLcdxy2N+tg+UTm2F/fOPSfNNQg7Lk46bRFZI02siZM1jUV+dSZTI5/+fA0VZRm5GYbrFfOZGLH
gxeuzj0cPkbs7LP4VD0MdbCdtm04db1zJjPHQZH/zKqz/wIAAP//haM09ukJAAA=
`,
	},

	"/templates": {
		name:  "templates",
		local: `templates`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"templates": {
		_escData["/templates/toolchain.cmake"],
	},
}
