// Code generated by "esc -o templates.go -pkg atmelstart templates"; DO NOT EDIT.

package atmelstart

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/toolchain.cmake": {
		name:    "toolchain.cmake",
		local:   "templates/toolchain.cmake",
		size:    2692,
		modtime: 1575311348,
		compressed: `
H4sIAAAAAAAC/5xWTXObSBA9i1/RZbvKUmlRdit7ySEHDFjLRgIVoEQ6TY2GljxrGLTDkMRF8d+3hg8Z
2UrKm5PETPfr97rfDFzD3PXd0IpdB+69hQsmOAH4QQyu48WGwTL6iCTjgmdlRiT+W3KJyfizG0Ze4MP7
2e8Tw7iGey4SYHl25CnKmbHnIiFHmR8kzcZWuCS2DVRmpsgFmkh33DwwNrkQttm8jJtOL8QFd3/bwWr7
Ijbf/cPy41ND6HaOAiVnt7DPJWC2wyTBBIqnQmEG37h6yEsFVEAQzYwC1dheWp9cEm2j2F0S31q60CE0
cBEqsAcCnzNsYgfLlbdwQ7ipWqn1pM+YTi/nTKevsjabU1qnA0rFU66ehpm98Dape6obiiuJX1GoAlIu
Hrk4AC+KEuHbA08RFBZKr11iE4fbng2JrXDuxiTerlyIYiv2bLLw7kIr3D63oW9UGAQx0ALOpjMBmedq
CH/v+Q7RsWRlxX+RZeC4ZBUG89Bagu9+dsPJGfB5+Ak/5TtJ5dMb8TvOEPiL7Zvg9zzF8eRdK4WqhzfW
8Xx7sXbct9c5UvZID/jWNln2J2vewxvXYKkMU4gUlaoBgIRLZCqXnUmseOkuSBRbYUwcT3urM9w6DF0/
JgsvajZaxyy4eEQJBZP82HFZeP4nNySRHXqrGK5uqheI9buqmrV5UZNW11dauJ1nWS5O9gIqksaHKGGf
0kPRKQ2Wy8An9wtrHsGVmamHMtuBmbFj+bGqZvZq3cHpPp6whgDdkWsRNL8hZA1mUIC535eCKZ4Ls8Dm
twAzS3NxMBlN0wLMw3swv9A0BbNQyceDKD98ANMhpKpmDn7lDOuakKvJsOJm8/9r7hOq6Js5TKd//Anm
XuSmepBIk4Lu0SwUVZwV7bpUirf/8DvDY4d6gXfbvwvtb7S4G30+mjF3g3il6Ev6m6lrS2UeZF4ewUyz
bhVF0q+ZxRFZ8VFQkc+av13IgQ1ExzfVmaf0fDXBvJQMQR+7AvC7kpQpTGAv8wxuD4y9W9JH1Lu3MyPl
hRpbq5XrOzC0YxSsQ1sfnIUbGQAAVWWCpOKAMGvx7zV8XTebP/ByXV+dclEkdW00/DzB0jLB0/niv06z
uyN0xVc0uzIOl79CM6NM5mOqmkkRmiQEvyMrFd3pG5/KAyoiaIYTwxjp+WO6b57hphrs1jNM95M2YsfF
xYgdF0MQfUOe7pY7z7fCbcv0pupr1APEn4T3BfWFpPVdQ1CqY6kKwHTf2GPWrJ+LG5/Ta96Gc7/5/YE/
NP7oGkJs1KkHHOBrnqTDO8r8iFJxLF7WWIXByg1jz40gWMerddx+JJwp7iQ4A9OoHHjnJZX3d1pPoNXW
lenCyMByrzis7xae/ULm0F/PHJqPF6oQdlz0OnUTWVmoPCMszzIqkrExGrWvfHhZKohicrf2Fo4xGunr
wfKd0wz77w4wA41P5VPXBz1pPYZ+6rUxmhgGiuRnVp38FwAA//8dLAVphAoAAA==
`,
	},

	"/templates": {
		name:  "templates",
		local: `templates`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"templates": {
		_escData["/templates/toolchain.cmake"],
	},
}
