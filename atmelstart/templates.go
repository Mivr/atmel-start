// Code generated by "esc -o templates.go -pkg atmelstart templates"; DO NOT EDIT.

package atmelstart

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/CMakeLists.txt": {
		local:   "templates/CMakeLists.txt",
		size:    829,
		modtime: 1524863545,
		compressed: `
H4sIAAAAAAAC/5yQ3WrbQBBG7/UUg1uwfFGl0CdwLQUEimMsubfLeHesDF6t0v2hLmLfvVgRrZq01PRy
2Y85hyM7PJPo2HAXOmHpa2BLKv1S7OvycQufso+rJHkHdR+sJDixJgd08RalJwUn23ewbKW8e8AzXX+X
WaLZ+XS92xXbHNbNQ1GJulnvG1E/HvabQtyXVVEnAADD8AEsmpYge7l/fz0f4/i5yO6GIYtx8XNKRsWY
jDqlkTooAsWWpO8t/79Vud1Uh7wQebl/YzVhcrY3WTVoW/LgewiOwD8RtGTI4tVJ9ooAHSBoPlq03yGl
y3jdwbJDNplcrrIElRLTIEXfkRbOo/VQN+um3MD74W9B42iQz3r4HnjK9O2JDBwDa8WmHcUmRpb40VlM
SzEL+ht/d/hcveHP08XbCxigC8ng8agJ0uDIgaITBu1fl/i1m8sIfH6Gxcty8c8kFZvzHIgtsnH+jxU0
m/OU/1WAkTl/az6ukh8BAAD//1413c49AwAA
`,
	},

	"/templates/toolchain.cmake": {
		local:   "templates/toolchain.cmake",
		size:    1178,
		modtime: 1524861472,
		compressed: `
H4sIAAAAAAAC/4yTT2/iMBDF73yKUVupINZ0pZ566CEbXDZq/iAnbZeTZZIhWMQOazutqojvviINLNV2
JU6JRvN+895kkiuxQa6klqpR3ODvRhoshs+UpUESw+3k+2gwuITrGWo0Mr+GVW0A1RKLAguw79ahgjfp
1nXjQGhI0snAohv6kfdIebpIMxrx2Iso9IQOl6IDH/JabWWF5lThcz+J5kFIGQijiK41EhRLSco8Hx2U
4/HX2vH4v+rxuBs8N/iK2lmopN5IXYK0tkF4W8sKwaF1+9pX7IwtDmyeeWxGM54t5hTSzMsCn4fBD+ax
xd9wh/gsSTIQFlZSF3xr6tIINRyBqWt3in8I4inf9/K5l/3kUTKlfM6SGfMiiOkzZaNP4M/tR34ll0aY
9zP5vWdI4nBxFn4lKxyObj6iCLc+c04Q++HTlJ4/ZyvyjSjx3DV5/qM3O+AHlxBKvUEDNjdy26vDIH6k
jKc+C+YZXFy1/cE8MUbjjIdBmvFpwHY3bTv5kKedere72Dv2a6VqfbwLELroDggNrCpR2t5iEkVJzB9C
b5bCBVFu3aglEJVvm/u2nfjzpx63X8CRdQro/4APQmfzBLkDklggq1WjcydrTSx2TwtEVbUuSS6qygIp
b4G8iKoCYl1xX+rm7g7IlPO2nUzxVea423F+9PFFjM4F/bU/kG5rfaB/3LxU3wixThhHSlM3WyCV6quo
i0ON2C3m9l4LXU+6176lzE8CZFftp0+039OfAAAA//8K3KX7mgQAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}
